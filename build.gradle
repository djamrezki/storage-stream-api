plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'jacoco'
}

group = 'ae.teletronics'
version = '0.1.0'

java {
    toolchain { languageVersion = JavaLanguageVersion.of(21) }
}

repositories { mavenCentral() }

dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation("org.apache.tika:tika-core:2.9.2")


    testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'io.projectreactor:reactor-test'
        testImplementation 'org.testcontainers:junit-jupiter'
        testImplementation 'org.testcontainers:mongodb'
}

tasks.test {
    useJUnitPlatform {
        excludeTags 'integration'
    }
    jvmArgs += ['-Xms256m','-Xmx512m'] // CI-friendly
    finalizedBy(tasks.jacocoTestReport)
}

tasks.register('integrationTest', Test) {
    useJUnitPlatform {
        includeTags 'integration'
    }
    shouldRunAfter test
    finalizedBy(tasks.jacocoTestReport)
}
check.dependsOn tasks.named('integrationTest')

tasks.jacocoTestReport {
    dependsOn(tasks.test, tasks.named('integrationTest'))
    reports {
        xml.required = true   // for CI tools
        html.required = true  // nice to browse locally
        csv.required = false
    }
    // Pick up exec data from all test tasks (Gradle can write .exec or .ec)
    executionData.from(fileTree(layout.buildDirectory).include(
            '**/jacoco/*.exec', '**/jacoco/*.ec'
    ))
    // Limit to your main source set
    sourceDirectories.from(files(sourceSets.main.allSource.srcDirs))
    classDirectories.from(files(sourceSets.main.output))
}

// Optional: fail the build on low coverage
// tasks.register('jacocoTestCoverageVerification', JacocoCoverageVerification) {
//     dependsOn(tasks.jacocoTestReport)
//     violationRules {
//         rule {
//             limit {
//                 counter = 'INSTRUCTION'
//                 value = 'COVEREDRATIO'
//                 minimum = 0.60
//             }
//         }
//     }
// }
// tasks.check.dependsOn(tasks.named('jacocoTestCoverageVerification'))



// put this at the end of build.gradle
bootJar {
    layered { }   // enable layered jar (optional)
}